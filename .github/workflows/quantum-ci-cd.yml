# AQUA V. Quantum Software DevOps Pipeline
# Document: QUA-QNS01-25SVD0001-DES-BOB-CDG-TD-CYB-812-00-01-TPL-CI-001-QDAT-v1.1.0.yml
# Version: 1.1.0 (Enhanced)
# ATA-Chapter: CYB-812 (Cybersecurity & DevOps)
# Owner: QDAT (Data Governance Division)
# Site: Silicon Valley (25SVD)

name: AQUA-V-Quantum-DevOps-Pipeline

on:
  push:
    branches: [ main, develop, feature/*, release/* ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      deploy_environment:
        description: 'Target deployment environment'
        required: false
        default: 'staging'
        type: choice
        options:
        - staging
        - production
      run_performance_tests:
        description: 'Run performance tests'
        required: false
        default: false
        type: boolean

env:
  BUILD_TYPE: Release
  CMAKE_VERSION: 3.28.0
  ARTIFACT_RETENTION_DAYS: 30
  QUANTUM_SDK_VERSION: 2.0.0
  AQUA_V_PROGRAM_VERSION: "7.6.0"
  AQUA_V_SITE_CODE: "25SVD"
  
  # Security and compliance
  ENABLE_SECURITY_SCAN: true
  ENABLE_COMPLIANCE_CHECK: true
  
  # Performance testing
  PERFORMANCE_THRESHOLD_MS: 5000
  MEMORY_THRESHOLD_MB: 1024
  
  # Notification settings
  SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
  TEAMS_WEBHOOK_URL: ${{ secrets.TEAMS_WEBHOOK_URL }}

jobs:
  # Stage 0: Source Code Fetch & Initialization
  initialize:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      commit: ${{ steps.commit.outputs.sha }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive
      
      - name: Extract Version
        id: version
        run: |
          VERSION=$(grep -oP 'v\d+\.\d+\.\d+' <<< "${{ github.ref_name }}" || echo "v1.0.0")
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
      
      - name: Get Commit SHA
        id: commit
        run: echo "sha=${GITHUB_SHA::8}" >> $GITHUB_OUTPUT

  # Stage 1: Build Environment Setup
  setup-environment:
    needs: initialize
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Build CI Environment
        uses: docker/build-push-action@v5
        with:
          context: .
          file: build/ci/QUA-QNS01-25SVD0001-DES-BOB-CDG-TD-CYB-812-00-02-TPL-CI-002-QDAT-v1.0.0.dockerfile
          tags: quantum-ci:${{ needs.initialize.outputs.version }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          push: false
          load: true

  # Stage 2: Build
  build:
    needs: [initialize, setup-environment]
    runs-on: ubuntu-latest
    container:
      image: quantum-ci:${{ needs.initialize.outputs.version }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      
      - name: Configure CMake
        run: |
          cmake -B build \
            -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} \
            -DQUANTUM_SDK_VERSION=${{ env.QUANTUM_SDK_VERSION }} \
            -DBUILD_SHARED_LIBS=ON \
            -DENABLE_TESTING=ON
      
      - name: Build Project
        run: cmake --build build --config ${{ env.BUILD_TYPE }} --parallel $(nproc)
      
      - name: Create Build Summary
        run: |
          echo "## AQUA V. Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: ${{ needs.initialize.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: ${{ needs.initialize.outputs.commit }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Build Type**: ${{ env.BUILD_TYPE }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Site**: ${{ env.AQUA_V_SITE_CODE }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Timestamp**: $(date)" >> $GITHUB_STEP_SUMMARY
      
      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts-${{ needs.initialize.outputs.commit }}
          path: |
            build/bin/
            build/lib/
          retention-days: ${{ env.ARTIFACT_RETENTION_DAYS }}

  # Stage 3: Security Scanning & Static Analysis
  security-scan:
    needs: [initialize, build]
    runs-on: ubuntu-latest
    if: env.ENABLE_SECURITY_SCAN == 'true'
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      
      - name: Run Trivy Security Scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
      
      - name: Upload Trivy Results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
      
      - name: Run CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          languages: cpp
          queries: security-and-quality
      
      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.projectKey=aqua-v-quantum-software
            -Dsonar.organization=aqua-v
            -Dsonar.sources=src/
            -Dsonar.tests=tests/
            -Dsonar.cfamily.build-wrapper-output=build/

  # Stage 4: Static Analysis & Linting
  static-analysis:
    needs: [initialize, security-scan]
    runs-on: ubuntu-latest
    container:
      image: quantum-ci:${{ needs.initialize.outputs.version }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      
      - name: Run Clang-Tidy
        run: |
          find src -name '*.cpp' -o -name '*.h' | \
          xargs clang-tidy -p build --config-file=.clang-tidy
      
      - name: Run CPPCheck
        run: |
          cppcheck --enable=all --suppress=missingInclude \
            --error-exitcode=1 --inline-suppr \
            -I include src/
      
      - name: Check Code Format
        run: |
          find src tests -name '*.cpp' -o -name '*.h' | \
          xargs clang-format --dry-run --Werror

  # Stage 5: Unit Testing
  unit-tests:
    needs: [initialize, build]
    runs-on: ubuntu-latest
    container:
      image: quantum-ci:${{ needs.initialize.outputs.version }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      
      - name: Download Build Artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts-${{ needs.initialize.outputs.commit }}
          path: build
      
      - name: Run Unit Tests
        run: |
          cd build
          ctest -C ${{ env.BUILD_TYPE }} --label-regex "unit" \
            --output-on-failure --parallel $(nproc)
      
      - name: Generate Coverage Report
        run: |
          cd build
          gcov -abcfu src/CMakeFiles/*.dir/*.gcno
          lcov --capture --directory . --output-file coverage.info
          lcov --remove coverage.info '/usr/*' --output-file coverage.info
      
      - name: Upload Coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./build/coverage.info
          flags: unittests

  # Stage 6: Integration Testing
  integration-tests:
    needs: [initialize, unit-tests]
    runs-on: ubuntu-latest
    container:
      image: quantum-ci:${{ needs.initialize.outputs.version }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      
      - name: Download Build Artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts-${{ needs.initialize.outputs.commit }}
          path: build
      
      - name: Setup Test Environment
        run: |
          ./tools/scripts/setup-test-env.sh integration
      
      - name: Run Integration Tests
        run: |
          cd build
          ctest -C ${{ env.BUILD_TYPE }} --label-regex "integration" \
            --output-on-failure --timeout 300

  # Stage 7: Performance Testing
  performance-tests:
    needs: [initialize, integration-tests]
    runs-on: ubuntu-latest
    if: github.event.inputs.run_performance_tests == 'true' || contains(github.ref, 'refs/tags/v')
    container:
      image: quantum-ci:${{ needs.initialize.outputs.version }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      
      - name: Download Build Artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts-${{ needs.initialize.outputs.commit }}
          path: build
      
      - name: Run Performance Tests
        run: |
          cd build
          ctest -C ${{ env.BUILD_TYPE }} --label-regex "performance" \
            --output-on-failure --verbose
      
      - name: Analyze Performance Results
        run: |
          python3 DES_SOFTWARE_DEV/tools/scripts/analyze-performance.py \
            --input build/Testing/Performance \
            --output performance-report.json
      
      - name: Performance Threshold Check
        run: |
          # Check if performance meets thresholds
          python3 -c "
          import json
          with open('performance-report.json', 'r') as f:
              report = json.load(f)
          
          # Check execution time threshold
          if 'execution_time' in report.get('quantum_metrics', {}):
              exec_time = report['quantum_metrics']['execution_time']['mean']
              if exec_time > ${{ env.PERFORMANCE_THRESHOLD_MS }}:
                  print(f'ERROR: Performance threshold exceeded: {exec_time}ms > ${{ env.PERFORMANCE_THRESHOLD_MS }}ms')
                  exit(1)
              else:
                  print(f'Performance within threshold: {exec_time}ms')
          
          print('Performance analysis completed successfully')
          "
      
      - name: Upload Performance Report
        uses: actions/upload-artifact@v4
        with:
          name: performance-report-${{ needs.initialize.outputs.commit }}
          path: performance-report.json
          retention-days: ${{ env.ARTIFACT_RETENTION_DAYS }}

  # Stage 8: Documentation Generation & Validation
  documentation:
    needs: [initialize, build]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      
      - name: Install Documentation Tools
        run: |
          sudo apt-get update
          sudo apt-get install -y doxygen graphviz plantuml
          pip install mkdocs mkdocs-material pymdown-extensions
      
      - name: Generate API Documentation
        run: |
          doxygen Doxyfile
          
      - name: Build Documentation Site
        run: |
          mkdocs build --strict
      
      - name: Validate Documentation Links
        run: |
          python3 DES_SOFTWARE_DEV/tools/scripts/validate-docs.py --path site/ --strict
      
      - name: Upload Documentation
        uses: actions/upload-artifact@v4
        with:
          name: documentation-${{ needs.initialize.outputs.commit }}
          path: site/

  # Stage 9: Artifact Generation & Storage
  package:
    needs: [initialize, unit-tests, integration-tests, performance-tests, documentation]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      
      - name: Download All Artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/
      
      - name: Create Release Package
        run: |
          mkdir -p release/bin release/lib release/config release/docs
          cp -r artifacts/build-artifacts-*/bin/* release/bin/
          cp -r artifacts/build-artifacts-*/lib/* release/lib/
          cp -r DES_SOFTWARE_DEV/tools/config/* release/config/
          cp -r artifacts/documentation-*/. release/docs/
          cp QUA-QNS01-25SVD0001-DES-BOB-S&L-TD-ATA-000-00-02-TPL-LIC-001-S&L-v1.0.0.txt release/LICENSE
          
          tar -czf quantum-software-${{ needs.initialize.outputs.version }}.tar.gz release/
      
      - name: Create Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: DES_SOFTWARE_DEV/build/ci/QUA-QNS01-25SVD0001-DES-BOB-CDG-TD-CYB-812-00-02-TPL-CI-002-QDAT-v1.0.0.dockerfile
          tags: |
            quantum-software:${{ needs.initialize.outputs.version }}
            quantum-software:latest
          push: false
      
      - name: Upload Release Package
        uses: actions/upload-artifact@v4
        with:
          name: release-${{ needs.initialize.outputs.version }}
          path: quantum-software-${{ needs.initialize.outputs.version }}.tar.gz
          retention-days: 90

  # Stage 10: Deployment (Staging)
  deploy-staging:
    if: github.ref == 'refs/heads/develop'
    needs: [initialize, package]
    runs-on: ubuntu-latest
    environment: staging
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      
      - name: Download Release Package
        uses: actions/download-artifact@v4
        with:
          name: release-${{ needs.initialize.outputs.version }}
      
      - name: Deploy to Staging
        run: |
          ./DES_SOFTWARE_DEV/tools/scripts/deploy.sh staging ${{ needs.initialize.outputs.version }}
      
      - name: Run Smoke Tests
        run: |
          ./DES_SOFTWARE_DEV/tools/scripts/smoke-test.sh staging

  # Stage 10: Deployment (Production)
  deploy-production:
    if: github.ref == 'refs/heads/main' && startsWith(github.ref, 'refs/tags/v')
    needs: [initialize, package]
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      
      - name: Download Release Package
        uses: actions/download-artifact@v4
        with:
          name: release-${{ needs.initialize.outputs.version }}
      
      - name: Deploy to Production
        run: |
          ./DES_SOFTWARE_DEV/tools/scripts/deploy.sh production ${{ needs.initialize.outputs.version }}
      
      - name: Verify Deployment
        run: |
          ./DES_SOFTWARE_DEV/tools/scripts/verify-deployment.sh production

  # Stage 11: Notifications and Reporting
  notify:
    runs-on: ubuntu-latest
    needs: [initialize, package, deploy-staging, deploy-production]
    if: always()
    steps:
      - name: Generate Pipeline Report
        run: |
          echo "## AQUA V. Pipeline Report" > pipeline-report.md
          echo "**Build**: ${{ github.run_number }}" >> pipeline-report.md
          echo "**Version**: ${{ needs.initialize.outputs.version }}" >> pipeline-report.md
          echo "**Commit**: ${{ needs.initialize.outputs.commit }}" >> pipeline-report.md
          echo "**Status**: ${{ job.status }}" >> pipeline-report.md
          echo "**Timestamp**: $(date)" >> pipeline-report.md
          echo "" >> pipeline-report.md
          echo "### Stage Results:" >> pipeline-report.md
          echo "- Initialize: ${{ needs.initialize.result }}" >> pipeline-report.md
          echo "- Package: ${{ needs.package.result }}" >> pipeline-report.md
          echo "- Deploy Staging: ${{ needs.deploy-staging.result }}" >> pipeline-report.md
          echo "- Deploy Production: ${{ needs.deploy-production.result }}" >> pipeline-report.md
      
      - name: Notify Slack
        if: env.SLACK_WEBHOOK_URL != ''
        run: |
          curl -X POST -H 'Content-type: application/json' \
            --data "{\"text\":\"AQUA V. Pipeline ${{ job.status }}: Build ${{ github.run_number }} - Version ${{ needs.initialize.outputs.version }}\"}" \
            ${{ env.SLACK_WEBHOOK_URL }}
      
      - name: Notify Teams
        if: env.TEAMS_WEBHOOK_URL != ''
        run: |
          curl -X POST -H 'Content-Type: application/json' \
            --data "{\"text\":\"AQUA V. Quantum Software Pipeline ${{ job.status }}\", \"summary\":\"Build ${{ github.run_number }} - ${{ needs.initialize.outputs.version }}\"}" \
            ${{ env.TEAMS_WEBHOOK_URL }}
